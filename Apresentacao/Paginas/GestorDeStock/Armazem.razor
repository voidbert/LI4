@page "/GestorDeStock/Armazem"

@using LI4.Negocio.Stock
@using LI4.Negocio.Utilizadores
@using LI4.Apresentacao.Componentes

@namespace LI4.Apresentacao.Paginas.GestorDeStock

@inject UtilizadoresService UtilizadoresService
@inject StockService StockService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IJSRuntime JSRuntime

<main>
    <HeaderTitle>Armazém de Partes</HeaderTitle>
    <table class="part-warehouse">
        <tr>
            <th>Identificador</th>
            <th>Nome</th>
            @if (Encomenda != null)
            {
                <th>Preço</th>
                <th>Quantidade</th>
            }
            <th>Número de Exemplares</th>
        </tr>

        @foreach(Parte parte in Partes)
        {
            <tr>
                <td>@parte.Identificador</td>
                <td>@parte.Nome</td>

                @if (Encomenda != null)
                {
                    <td>@String.Format("{0:F2} €", parte.Preco)</td>
                    <td>
                        <button @onclick="@(() => DecrementarQuantidade(parte))">-</button>
                        @Encomenda.Conteudo.GetValueOrDefault(parte.Identificador, 0).ToString()
                        <button @onclick="@(() => IncrementarQuantidade(parte))">+</button>
                    </td>
                }
                <td>@parte.QuantidadeArmazem</td>
            </tr>
        }
    </table>

    <div class="action-buttons">
        @if (Encomenda == null)
        {
            <LinkButton Href="/GestorDeStock" Title="Voltar" />
        }
        else
        {
            <ActionButton Callback="@CancelarEncomenda" Title="Cancelar Encomenda" />
        }
        @if (Encomenda == null)
        {
            <ActionButton Callback="@ComecarEncomenda" Title="Começar Encomenda" />
        }
        else
        {
            <span>Total &colon; @String.Format("{0:F2} €", Encomenda.Preco)</span>
            <ActionButton Callback="@ColocarEncomenda" Title="Colocar Encomenda" />
        }
    </div>
</main>

@code {
    private List<Parte> Partes { get; set; } = new List<Parte>();
    private EncomendaPartes? Encomenda { get; set; }
    private SessaoController? SessaoController { get; set; }
    private Utilizador? GestorDeStock { get; set; }

    protected override void OnInitialized()
    {
        SessaoController = new SessaoController(UtilizadoresService, ProtectedLocalStorage, NavigationManager);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SessaoController!.RedirecionarConformeTipo(Utilizador.Tipo.GestorDeStock);

            GestorDeStock = await SessaoController!.GetUtilizadorComSessaoIniciada();
            Partes = await StockService.ObterTodasAsPartes();
            Partes.Sort((p1, p2) => p1.Nome.CompareTo(p2.Nome));
            StateHasChanged();
        }
    }

    private void ComecarEncomenda()
    {
        Encomenda = new EncomendaPartes(DateTime.Now, GestorDeStock!);
    }

    private void CancelarEncomenda()
    {
        Encomenda = null;
    }

    private async Task ColocarEncomenda()
    {
        Encomenda!.InstanteRealizacao = DateTime.Now;
        try
        {
            await StockService.ColocarEncomenda(Encomenda!);
            NavigationManager.NavigateTo("/GestorDeStock");
        }
        catch (EncomendaVaziaException)
        {
            (new Alert(JSRuntime)).Launch("Encomenda vazia não pode ser colocada");
        }
    }

    private void IncrementarQuantidade(Parte parte)
    {
        int quantidade = Encomenda!.Conteudo.GetValueOrDefault(parte.Identificador, 0);
        Encomenda!.DefinirQuantidadeDeParte(parte, quantidade + 1);
        StateHasChanged();
    }

    private void DecrementarQuantidade(Parte parte)
    {
        int quantidade = Encomenda!.Conteudo.GetValueOrDefault(parte.Identificador, 0);
        if (quantidade == 0)
            return;

        Encomenda!.DefinirQuantidadeDeParte(parte, quantidade - 1);
    }
}

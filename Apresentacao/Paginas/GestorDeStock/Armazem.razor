@page "/GestorDeStock/Armazem"

@using LI4.Apresentacao.Componentes
@using LI4.Negocio.Stock
@using LI4.Negocio.Utilizadores

@namespace LI4.Apresentacao.Paginas.GestorDeStock

@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject StockService StockService
@inject UtilizadoresService UtilizadoresService

<Autorizador TipoDeConta=@Utilizador.Tipo.GestorDeStock />
<Alerta @bind-Mensagem=@MensagemAlerta />

Armazém de Partes

@if (Encomenda == null)
{
    <a href="/GestorDeStock">
        <button>Voltar</button>
    </a>
}
else
{
    <button @onclick=@CancelarEncomenda>Cancelar Encomenda</button>
}

<table>
    <tr>
        <th>Identificador</th>
        <th>Nome</th>
        @if (Encomenda != null)
        {
            <th>Preço</th>
            <th>Quantidade</th>
        }
        <th>Número de Exemplares</th>
    </tr>

    @foreach(Parte parte in Partes)
    {
        <tr>
            <td>@parte.Identificador</td>
            <td>@parte.Nome</td>

            @if (Encomenda != null)
            {
                <td>@String.Format("{0:F2} €", parte.Preco)</td>
                <td>
                    <button @onclick="@(() => DecrementarQuantidade(parte))">-</button>
                    @Encomenda.ConteudoRaw.GetValueOrDefault(parte.Identificador, 0).ToString()
                    <button @onclick="@(() => IncrementarQuantidade(parte))">+</button>
                </td>
            }
            <td>@parte.QuantidadeArmazem</td>
        </tr>
    }
</table>

@if (Encomenda == null)
{
    <button @onclick=@ComecarEncomenda>Começar Encomenda</button>
}
else
{
    <span>Total &colon; @String.Format("{0:F2} €", Encomenda.Preco)</span>
    <button @onclick=@ColocarEncomenda>
        Colocar Encomenda
    </button>
}


@code
{
    private List<Parte> Partes { get; set; } = new List<Parte>();
    private EncomendaPartes? Encomenda { get; set; }
    private string? MensagemAlerta { get; set; }

    private SessaoController? SessaoController { get; set; }
    private Utilizador? GestorDeStock { get; set; }

    protected override void OnInitialized()
    {
        SessaoController = new SessaoController(UtilizadoresService, ProtectedLocalStorage, NavigationManager);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SessaoController!.RedirecionarConformeTipo(Utilizador.Tipo.GestorDeStock);

            GestorDeStock = await SessaoController!.ObterUtilizadorComSessaoIniciada();
            Partes = StockService.ObterTodasAsPartes();
            Partes.Sort((p1, p2) => p1.Nome.CompareTo(p2.Nome));
            StateHasChanged();
        }
    }

    private void ComecarEncomenda()
    {
        Encomenda = new EncomendaPartes(DateTime.Now, GestorDeStock!.EnderecoEletronico);
    }

    private void CancelarEncomenda()
    {
        Encomenda = null;
    }

    private void ColocarEncomenda()
    {
        Encomenda!.InstanteRealizacao = DateTime.Now;
        try
        {
            StockService.ColocarEncomenda(Encomenda!);
            NavigationManager.NavigateTo("/GestorDeStock");
        }
        catch (EncomendaVaziaException)
        {
            MensagemAlerta = "Encomenda vazia não pode ser colocada";
        }
    }

    private void IncrementarQuantidade(Parte parte)
    {
        int quantidade = Encomenda!.ConteudoRaw.GetValueOrDefault(parte.Identificador, 0);
        Encomenda!.DefinirQuantidadeDeParte(parte, quantidade + 1);
        StateHasChanged();
    }

    private void DecrementarQuantidade(Parte parte)
    {
        int quantidade = Encomenda!.ConteudoRaw.GetValueOrDefault(parte.Identificador, 0);
        if (quantidade == 0)
            return;

        Encomenda!.DefinirQuantidadeDeParte(parte, quantidade - 1);
    }
}

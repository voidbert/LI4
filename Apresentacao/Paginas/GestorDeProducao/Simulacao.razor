@page "/GestorDeProducao/Simulacao"

@using LI4.Apresentacao.Componentes
@using LI4.Negocio
@using LI4.Negocio.Utilizadores
@using LI4.Negocio.Producao

@namespace LI4.Apresentacao.Paginas.GestorDeStock

@inject ICamadaNegocio CamadaNegocio
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<title>Simulação - Weapons Я Us</title>
<Autorizador TipoDeConta=@Utilizador.Tipo.GestorDeProducao />
<Alerta @bind-Mensagem=@MensagemAlerta />

<main>
    <section class="graph">
        <img class="base" src="conveyor-belt.png"/>
        <div id="section1">
            <div class="section">
                <p>Cabeça</p>
            </div>
        </div>
        <div id="section2">
            <div class="section">
                <p>Braços</p>
            </div>
        </div>
        <div id="section3">
            <div class="section">
                <p>Pernas</p>
            </div>
        </div>

        @if (OrdemProducao != null)
        {
            @foreach (var element in EVAs.Select((eva, index) => new { eva, index }))
            {
                <div class="place-animation-start">
                    <div style="animation-delay: @($"{element.index * 3 + 10}s")" class="go-off-screen">
                        <img
                            style="animation-delay: @($"{element.index * 3}s")"
                            class="animate"
                            src="@element.eva.Imagem"
                        />
                    </div>
                </div>
            }

            <meta http-equiv="refresh" content="@($"{(EVAs.Count() - 1) * 3 + 15}");url=/GestorDeProducao" />
        }
    </section>

    <div style="padding-top: 20px">
        <LinkButton Href="/GestorDeProducao" Title="Voltar"/>
    </div>
</main>

@code
{
    private List<EVA> EVAs { get; set; } = new List<EVA>();
    private OrdemProducao? OrdemProducao { get; set; }
    private string? MensagemAlerta { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SessaoController sessoes = new SessaoController(CamadaNegocio, ProtectedLocalStorage, NavigationManager);
            GestorDeProducao utilizador = (GestorDeProducao) (await sessoes.ObterUtilizadorComSessaoIniciada())!;

            OrdemProducao = utilizador.OrdensProducao.MaxBy(o => o.InstanteEmissao);
            if (OrdemProducao == null)
            {
                MensagemAlerta = "Sem ordens de produção para visualizar";
                StateHasChanged();
                return;
            }

            if (OrdemProducao!.Visualizada)
            {
                MensagemAlerta = "Última ordem de produção já foi visualizada";
                OrdemProducao = null;
                StateHasChanged();
                return;
            }

            foreach(KeyValuePair<EVA, int> pair in OrdemProducao.Conteudo)
            {
                for(int i = 0; i < pair.Value; i++)
                {
                    EVAs.Add(pair.Key);
                }
            }

            CamadaNegocio.RegistarOrdemProducaoComoVisualizada(OrdemProducao.Identificador!.Value);
            StateHasChanged();
        }
    }
}

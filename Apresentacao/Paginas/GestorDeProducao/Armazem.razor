@page "/GestorDeProducao/Armazem"

@using LI4.Apresentacao.Componentes
@using LI4.Negocio
@using LI4.Negocio.Producao
@using LI4.Negocio.Utilizadores

@namespace LI4.Apresentacao.Paginas.GestorDeProducao

@inject ComumService ComumService
@inject ProducaoService ProducaoService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject UtilizadoresService UtilizadoresService

<Autorizador TipoDeConta=@Utilizador.Tipo.GestorDeProducao />
<Alerta @bind-Mensagem=@MensagemAlerta />

Armazém de EVAs

@if (OrdemProducao == null)
{
    <a href="/GestorDeProducao">
        <button>Voltar</button>
    </a>
}
else
{
    <button @onclick=@CancelarOrdemProducao>Cancelar Ordem de Produção</button>
}

<table>
    <tr>
        <th>Identificador</th>
        <th>Nome</th>
        @if (OrdemProducao != null)
        {
            <th>Quantidade</th>
        }
        <th>Número de Exemplares</th>
    </tr>

    @foreach(EVA eva in EVAs)
    {
        <tr>
            <td>@eva.Identificador</td>
            <td>@eva.Nome</td>

            @if (OrdemProducao != null)
            {
                <td>
                    <button @onclick="@(() => DecrementarQuantidade(eva))">-</button>
                    @OrdemProducao.ConteudoRaw.GetValueOrDefault(eva.Identificador, 0).ToString()
                    <button @onclick="@(() => IncrementarQuantidade(eva))">+</button>
                </td>
            }
            <td>@eva.QuantidadeArmazem</td>
        </tr>
    }
</table>

@if (OrdemProducao == null)
{
    <button @onclick=@ComecarOrdemProducao>Começar Ordem de Produção</button>
}
else
{
    <button @onclick=@ColocarOrdemProducao>
        Colocar Ordem de Producao
    </button>
}

@code
{
    private List<EVA> EVAs { get; set; } = new List<EVA>();
    private OrdemProducao? OrdemProducao { get; set; }
    private Utilizador? GestorDeProducao { get; set; }
    private string? MensagemAlerta { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SessaoController sessoes = new SessaoController(UtilizadoresService, ProtectedLocalStorage, NavigationManager);
            GestorDeProducao = await sessoes.ObterUtilizadorComSessaoIniciada();

            EVAs = ComumService.ObterTodasAsEVAs();
            EVAs.Sort((e1, e2) => e1.Nome.CompareTo(e2.Nome));
            StateHasChanged();
        }
    }

    private void ComecarOrdemProducao()
    {
        OrdemProducao = new OrdemProducao(DateTime.Now, GestorDeProducao!);
    }

    private void CancelarOrdemProducao()
    {
        OrdemProducao = null;
    }

    private void ColocarOrdemProducao()
    {
        OrdemProducao!.InstanteEmissao = DateTime.Now;
        try
        {
            ProducaoService.ColocarOrdemProducao(OrdemProducao!);
            NavigationManager.NavigateTo("/GestorDeStock");
        }
        catch (OrdemProducaoVaziaException)
        {
            MensagemAlerta = "Ordem de produção vazia não pode ser colocada";
        }
        catch (SemPartesException)
        {
            MensagemAlerta = "Sem partes suficientes";
        }
    }

    private void IncrementarQuantidade(EVA eva)
    {
        int quantidade = OrdemProducao!.ConteudoRaw.GetValueOrDefault(eva.Identificador, 0);
        OrdemProducao!.DefinirQuantidadeDeEVA(eva, quantidade + 1);
        StateHasChanged();
    }

    private void DecrementarQuantidade(EVA eva)
    {
        int quantidade = OrdemProducao!.ConteudoRaw.GetValueOrDefault(eva.Identificador, 0);
        if (quantidade == 0)
            return;

        OrdemProducao!.DefinirQuantidadeDeEVA(eva, quantidade - 1);
    }
}

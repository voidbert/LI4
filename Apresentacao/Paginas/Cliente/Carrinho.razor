@page "/Cliente/Carrinho"

@using LI4.Negocio
@using LI4.Negocio.Utilizadores
@using LI4.Negocio.Encomendas

@namespace LI4.Apresentacao.Paginas.Cliente

@inject UtilizadoresService UtilizadoresService
@inject ComumService ComumService
@inject EncomendasService EncomendasService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

Carrinho de Compras

<table>
    <tr>
        <th>Item</th>
        <th>Preço</th>
        <th>Quantidade</th>
        <th>Total</th>
        <th></th>
    </tr>

    @foreach (EVA eva in EVAs)
    {
        <tr>
            <td>
                <img src="@eva.Imagem" asp-append-version="true" width="200rem" />
                @eva.Nome
            </td>
            <td>
                @String.Format("{0:F2} €", eva.Preco)
            </td>
            <td>
                <button @onclick="@(() => DecrementarQuantidade(eva))">-</button>
                @CarrinhoCompras!.Conteudo.GetValueOrDefault(eva.Identificador, 0).ToString()
                <button @onclick="@(() => IncrementarQuantidade(eva))">+</button>
            </td>
            <td>
                @String.Format("{0:F2} €", eva.Preco * CarrinhoCompras!.Conteudo[eva.Identificador])
            </td>
            <td>
                <button @onclick="@(() => RemoverEVA(eva))">Remover</button>
            </td>
        </tr>
    }

</table>

<a href="/Cliente">
    <button>Voltar</button>
</a>

<span>
    @String.Format("{0:F2} €", Preco)
</span>

<InputText placeholder="Morada" @bind-Value=@Morada />

<button @onclick=@FinalizarPedido>Finalizar Pedido</button>

@code {
    private List<EVA> EVAs { get; set; } = new List<EVA>();

    private CarrinhoCompras? CarrinhoCompras { get; set; }
    private double Preco { get; set; }
    private string Morada { get; set; } = "";

    private SessaoController? SessaoController { get; set; }
    private Utilizador? Cliente { get; set; }

    protected override void OnInitialized()
    {
        SessaoController = new SessaoController(UtilizadoresService, ProtectedLocalStorage, NavigationManager);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SessaoController!.RedirecionarConformeTipo(Utilizador.Tipo.Cliente);

            Cliente = await SessaoController!.GetUtilizadorComSessaoIniciada();

            CarrinhoCompras = await EncomendasService.ObterCarrinho(Cliente!.EnderecoEletronico);
            foreach (int identificadorEVA in CarrinhoCompras.Conteudo.Keys)
            {
                EVA? eva = await ComumService.ObterEVA(identificadorEVA);
                if (eva != null)
                {
                    EVAs.Add(eva);
                }
            }

            Preco = await CarrinhoCompras!.CalcularPreco();
            StateHasChanged();
        }
    }

    private void FinalizarPedido()
    {

    }

    private async Task IncrementarQuantidade(EVA eva)
    {
        int quantidade = CarrinhoCompras!.Conteudo.GetValueOrDefault(eva.Identificador, 0);
        CarrinhoCompras!.DefinirQuantidadeDeEVA(eva, quantidade + 1);
        await EncomendasService.AtualizarCarrinho(CarrinhoCompras);
        Preco = await CarrinhoCompras!.CalcularPreco();
    }

    private async Task DecrementarQuantidade(EVA eva)
    {
        int quantidade = CarrinhoCompras!.Conteudo.GetValueOrDefault(eva.Identificador, 0);
        if (quantidade <= 1)
            return;

        CarrinhoCompras!.DefinirQuantidadeDeEVA(eva, quantidade - 1);
        await EncomendasService.AtualizarCarrinho(CarrinhoCompras);
        Preco = await CarrinhoCompras!.CalcularPreco();
    }

    private async Task RemoverEVA(EVA eva)
    {
        CarrinhoCompras!.DefinirQuantidadeDeEVA(eva, 0);
        EVAs.Remove(eva);
        await EncomendasService.AtualizarCarrinho(CarrinhoCompras);
        Preco = await CarrinhoCompras!.CalcularPreco();
    }
}

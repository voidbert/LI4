@page "/Cliente/Carrinho"

@using LI4.Apresentacao.Componentes
@using LI4.Negocio
@using LI4.Negocio.Producao
@using LI4.Negocio.Utilizadores

@namespace LI4.Apresentacao.Paginas.Cliente

@inject ICamadaNegocio CamadaNegocio
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<Autorizador TipoDeConta=@Utilizador.Tipo.Cliente />
<Alerta @bind-Mensagem=@MensagemAlerta />

<main>
    <HeaderTitle>Carrinho de Compras</HeaderTitle>
    <table class="cart">
        <tr>
            <th>Item</th>
            <th>Preço</th>
            <th>Quantidade</th>
            <th>Total</th>
            <th></th>
        </tr>

        @foreach (EVA eva in EVAs)
        {
            <tr>
                <td class="eva">
                    <img src="@eva.Imagem" asp-append-version="true" width="200rem" />
                    <span>@eva.Nome</span>
                </td>
                <td>
                    @String.Format("{0:F2} €", eva.Preco)
                </td>
                <td>
                    <Counter Value="@CarrinhoCompras!.ConteudoRaw.GetValueOrDefault(eva.Identificador, 0)" Decrementar="@(() => DecrementarQuantidade(eva))" Incrementar="@(() => IncrementarQuantidade(eva))"/>
                </td>
                <td>
                    @String.Format("{0:F2} €", eva.Preco * CarrinhoCompras!.ConteudoRaw[eva.Identificador])
                </td>
                <td>
                    <XComp AoClicar="@(() => RemoverEVA(eva))" />
                </td>
            </tr>
        }
    </table>

    <div class="checkout-container">
        <!-- Row 1: Back Button -->
            <div class="left-button">
                <LinkButton Href="/Cliente" Title="Voltar" />
            </div>

        <!-- Row 2: Finalization Section -->
        <div class="finalization">
            <!-- Address Input -->
            <div class="address-input">
                <InputField Placeholder="Morada de Entrega" Value="@Morada" Callback="@OnInputChange"/>
            </div>
            <!-- Final Price and Button -->
            <div class="finalization-details">
                <div class="final-price">
                    Preço Final: <span>@String.Format("{0:F2} €", Preco)</span>
                </div>
                <div class="finalize-button">
                    <ActionButton Callback="@FinalizarPedido" Title="Finalizar Pedido" />
                </div>
            </div>
        </div>
    </div>
</main>

@code
{
    private List<EVA> EVAs { get; set; } = new List<EVA>();

    private CarrinhoCompras? CarrinhoCompras { get; set; }
    private double Preco { get; set; }
    private string Morada { get; set; } = "";
    private string? MensagemAlerta { get; set; }

    private Utilizador? Cliente { get; set; }

    private void OnInputChange(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            String? valor = e.Value.ToString();
            if (valor != null)
            {
                Morada = valor;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SessaoController sessoes = new SessaoController(CamadaNegocio, ProtectedLocalStorage, NavigationManager);
            Cliente = await sessoes.ObterUtilizadorComSessaoIniciada();

            CarrinhoCompras = CamadaNegocio.ObterCarrinho(Cliente!.EnderecoEletronico);
            EVAs = CarrinhoCompras.Conteudo.Keys.ToList();
            EVAs.Sort((e1, e2) => String.Compare(e1.Nome, e2.Nome, StringComparison.Ordinal));

            Preco = CarrinhoCompras!.CalcularPreco();
            StateHasChanged();
        }
    }

    private void FinalizarPedido()
    {
        if (Morada == "")
        {
            MensagemAlerta = "Morada não pode estar vazia";
            return;
        }

        EncomendaEVAs encomenda = new EncomendaEVAs(Cliente!.EnderecoEletronico, Morada, Preco, DateTime.Now, CarrinhoCompras!.ConteudoRaw);
        try
        {
            CamadaNegocio.ColocarEncomendaEVAs(encomenda);
        }
        catch (CarrinhoVazioException)
        {
            MensagemAlerta = "Carrinho de compras não pode estar vazio";
            return;
        }

        CarrinhoCompras!.ConteudoRaw = new Dictionary<int, int>();
        CamadaNegocio.AtualizarCarrinho(CarrinhoCompras!);

        EVAs = new List<EVA>(); // Not to crash the renderer while the redirect isn't complete
        NavigationManager.NavigateTo("/Cliente");
    }

    private void IncrementarQuantidade(EVA eva)
    {
        int quantidade = CarrinhoCompras!.ConteudoRaw.GetValueOrDefault(eva.Identificador, 0);
        CarrinhoCompras!.DefinirQuantidadeDeEVA(eva, quantidade + 1);
        CamadaNegocio.AtualizarCarrinho(CarrinhoCompras);
        Preco = CarrinhoCompras!.CalcularPreco();
    }

    private void DecrementarQuantidade(EVA eva)
    {
        int quantidade = CarrinhoCompras!.ConteudoRaw.GetValueOrDefault(eva.Identificador, 0);
        if (quantidade <= 1)
            return;

        CarrinhoCompras!.DefinirQuantidadeDeEVA(eva, quantidade - 1);
        CamadaNegocio.AtualizarCarrinho(CarrinhoCompras);
        Preco = CarrinhoCompras!.CalcularPreco();
    }

    private void RemoverEVA(EVA eva)
    {
        CarrinhoCompras!.DefinirQuantidadeDeEVA(eva, 0);
        EVAs.Remove(eva);
        CamadaNegocio.AtualizarCarrinho(CarrinhoCompras);
        Preco = CarrinhoCompras!.CalcularPreco();
    }
}

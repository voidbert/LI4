@page "/Cliente"

@using LI4.Apresentacao.Componentes
@using LI4.Negocio
@using LI4.Negocio.Encomendas
@using LI4.Negocio.Utilizadores

@namespace LI4.Apresentacao.Paginas.Cliente

@inject ComumService ComumService
@inject EncomendasService EncomendasService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject UtilizadoresService UtilizadoresService

<Autorizador TipoDeConta=@Utilizador.Tipo.Cliente />

<main class="catalog-layout">
    <!-- Left sidebar -->
    <aside class="left-sidebar">
        <InputField Placeholder="Pesquisar" Value=@Pesquisa Callback=@Pesquisar />
        <div class="filters">
            <InputRadioGroup @bind-Value="@Ordem">
                @foreach (string ordem in Ordens.Keys)
                {
                    <label for=@ordem>
                        <InputRadio id=@ordem Value=@ordem @oninput=@Reordenar /> @ordem
                    </label>
                }
            </InputRadioGroup>
        </div>
    </aside>

    <div class="catalog-container">
        @foreach (EVA eva in EVAs)
        {
            @if (eva.Nome.Contains(Pesquisa))
            {
                <ProductCard Imagem="@eva.Imagem" Nome="@eva.Nome" Preco="@eva.Preco" Callback="() => AdicionarCarrinho(eva)"/>
            }
        }
    </div>
    
    <aside class="right-sidebar">
        <HeaderTitle>Olá, @Cliente!.NomeCivil!</HeaderTitle>
        <LinkButton Href="/Cliente/Carrinho" Title="Ver Carrinho"></LinkButton>
        <LinkButton Href="/Cliente/Encomendas" Title="Ver Encomendas"></LinkButton>
        <ActionButton Callback="Logout" Title="Terminar Sessão"></ActionButton>
    </aside>
</main>

@code
{
    private Dictionary<string, Comparison<EVA>> Ordens = new Dictionary<string, Comparison<EVA>>
    {
        { "Alfabética ↑", (e1, e2) => e1.Nome.CompareTo(e2.Nome) },
        { "Alfabética ↓", (e1, e2) => e2.Nome.CompareTo(e1.Nome) },
        { "Preço ↑", (e1, e2) => e1.Preco.CompareTo(e2.Preco) },
        { "Preço ↓", (e1, e2) => e2.Preco.CompareTo(e1.Preco) }
    };
    private String Ordem { get; set; } = "Alfabética ↑";
    private String Pesquisa { get; set; } = "";

    private List<EVA> EVAs { get; set; } = new List<EVA>();
    private Utilizador? Cliente { get; set; }

    private SessaoController? SessaoController { get; set; }

    protected override void OnInitialized()
    {
        SessaoController = new SessaoController(UtilizadoresService, ProtectedLocalStorage, NavigationManager);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Cliente = await SessaoController!.ObterUtilizadorComSessaoIniciada();
            EVAs = ComumService.ObterTodasAsEVAs();
            StateHasChanged();
        }
    }

    private void Pesquisar(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            String? valor = e.Value.ToString();
            if (valor != null)
            {
                Pesquisa = valor;
            }
        }
        StateHasChanged();
    }

    private void Reordenar(ChangeEventArgs e)
    {
        Ordem = e.Value!.ToString()!;
        EVAs.Sort(Ordens[Ordem]!);
        StateHasChanged();
    }

    private void AdicionarCarrinho(EVA eva)
    {
        CarrinhoCompras carrinho = EncomendasService.ObterCarrinho(Cliente!.EnderecoEletronico);

        int quantidade = carrinho!.ConteudoRaw.GetValueOrDefault(eva.Identificador, 0);
        carrinho.DefinirQuantidadeDeEVA(eva, quantidade + 1);
        EncomendasService.AtualizarCarrinho(carrinho);
    }

    private async Task Logout() {
        await SessaoController!.TerminarSessao();
        NavigationManager.NavigateTo("/");
    }
}

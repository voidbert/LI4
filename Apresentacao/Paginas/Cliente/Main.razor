@page "/Cliente"

@using LI4.Negocio
@using LI4.Negocio.Utilizadores
@using LI4.Negocio.Encomendas

@namespace LI4.Apresentacao.Paginas.Cliente

@inject UtilizadoresService UtilizadoresService
@inject ComumService ComumService
@inject EncomendasService EncomendasService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<InputText id="search" placeholder="Pesquisar" @bind-Value=@Pesquisa @oninput=@Pesquisar />

<br/>
<InputRadioGroup @bind-Value="@Ordem">
    @foreach (string ordem in Ordens.Keys)
    {
        <InputRadio id=@ordem Value=@ordem @oninput=@Reordenar />
        <label for=@ordem>@ordem</label>
        <br />
    }
</InputRadioGroup>

@foreach (EVA eva in EVAs)
{
    @if (eva.Nome.Contains(Pesquisa))
    {
        <div>
            <img src="@eva.Imagem" asp-append-version="true" width="200rem" />
            @eva.Nome
            @String.Format("{0:F2} €", eva.Preco)
            <button @onclick="() => AdicionarCarrinho(eva)">Adicionar ao Carrinho</button>
        </div>
    }
}

@if (Cliente == null)
{
    <span>Olá, ???!</span>
}
else
{
    <span>Olá, @Cliente!.NomeCivil!</span>
}

<a href="/Cliente/Carrinho">
    <button>Ver Carrinho</button>
</a>

<a href="/Cliente/Encomendas">
    <button>Ver Encomendas</button>
</a>

<button @onclick="Logout">Terminar Sessão</button>

@code {
    private Dictionary<string, Comparison<EVA>> Ordens = new Dictionary<string, Comparison<EVA>>
    {
        { "Alfabética ↑", (e1, e2) => e1.Nome.CompareTo(e2.Nome) },
        { "Alfabética ↓", (e1, e2) => e2.Nome.CompareTo(e1.Nome) },
        { "Preço ↑", (e1, e2) => e1.Preco.CompareTo(e2.Preco) },
        { "Preço ↓", (e1, e2) => e2.Preco.CompareTo(e1.Preco) }
    };
    private String Ordem { get; set; } = "Alfabética ↑";
    private String Pesquisa { get; set; } = "";

    private List<EVA> EVAs { get; set; } = new List<EVA>();
    private String? NomeCivil { get; set; } = "";
    private SessaoController? SessaoController { get; set; }
    private Utilizador? Cliente { get; set; }

    protected override void OnInitialized()
    {
        SessaoController = new SessaoController(UtilizadoresService, ProtectedLocalStorage, NavigationManager);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SessaoController!.RedirecionarConformeTipo(Utilizador.Tipo.Cliente);

            Cliente = await SessaoController!.GetUtilizadorComSessaoIniciada();
            EVAs = await ComumService.ObterTodasAsEVAs();
            StateHasChanged();
        }
    }

    private void Pesquisar(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            String? valor = e.Value.ToString();
            if (valor != null)
            {
                Pesquisa = valor;
            }
        }
        StateHasChanged();
    }

    private void Reordenar(ChangeEventArgs e)
    {
        Ordem = e.Value!.ToString()!;
        EVAs.Sort(Ordens[Ordem]!);
        StateHasChanged();
    }

    private async Task AdicionarCarrinho(EVA eva)
    {
        CarrinhoCompras carrinho = await EncomendasService.ObterCarrinho(Cliente!.EnderecoEletronico);

        int quantidade = carrinho!.Conteudo.GetValueOrDefault(eva.Identificador, 0);
        carrinho.DefinirQuantidadeDeEVA(eva, quantidade + 1);
        await EncomendasService.AtualizarCarrinho(carrinho);
    }

    private async Task Logout() {
        await SessaoController!.TerminarSessao();
        NavigationManager.NavigateTo("/");
    }
}

@page "/GestorDeContas"

@using LI4.Apresentacao.Componentes
@using LI4.Negocio
@using LI4.Negocio.Utilizadores
@using LI4.Negocio.Producao
@using LI4.Negocio.Stock

@namespace LI4.Apresentacao.Paginas.GestorDeContas

@inject ICamadaNegocio CamadaNegocio
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<Autorizador TipoDeConta=@Utilizador.Tipo.GestorDeContas />

<main>
    <HeaderTitle>Histórico de Transações</HeaderTitle>
    <table class="transactions">
        <tr>
            <th>Data e hora</th>
            <th>Descrição</th>
            <th>Valor</th>
        </tr>

        @foreach (Transacao transacao in Transacoes)
        {
            <tr class="@((transacao.Valor >= 0) ? "positive" : "negative")">
                <td>@transacao.Instante</td>
                <td>@transacao.Descricao</td>
                <td>@String.Format("{0:+ 0.00##;- 0.00##;0.00} €", transacao.Valor)</td>
            </tr>
        }
    </table>
    <ActionButton Callback="@Logout" Title="Terminar Sessão" />
</main>

@code
{
    private record Transacao
    {
        public required DateTime Instante { get; set; }
        public required string Descricao { get; set; }
        public required double Valor { get; set; }
    }

    private List<Transacao> Transacoes { get; set; } = new List<Transacao>();
    private SessaoController? SessaoController { get; set; }

    protected override void OnInitialized()
    {
        SessaoController = new SessaoController(CamadaNegocio, ProtectedLocalStorage, NavigationManager);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            foreach (EncomendaPartes encomenda in CamadaNegocio.ObterTodasAsEncomendasPartes())
            {
                Transacoes.Add(new Transacao
                {
                    Instante = encomenda.InstanteRealizacao,
                    Descricao = String.Format("Encomenda de partes {0}", encomenda.Identificador),
                    Valor = -encomenda.Preco
                });
            }

            foreach (EncomendaEVAs encomenda in CamadaNegocio.ObterTodasAsEncomendasEVAs())
            {
                if (encomenda.InstanteEntrega != null)
                {
                    Transacoes.Add(new Transacao
                    {
                        Instante = encomenda.InstanteEntrega.Value,
                        Descricao = String.Format("Entrega da encomenda {0}", encomenda.Identificador),
                        Valor = encomenda.Preco
                    });
                }

                if (encomenda.InstanteDevolucao != null)
                {
                    Transacoes.Add(new Transacao
                    {
                        Instante = encomenda.InstanteDevolucao.Value,
                        Descricao = String.Format("Devolucao da encomenda {0}", encomenda.Identificador),
                        Valor = -encomenda.Preco
                    });
                }
            }

            Transacoes.Sort((t1, t2) => t2.Instante.CompareTo(t1.Instante));
            StateHasChanged();
        }
    }

    private async Task Logout() {
        await SessaoController!.TerminarSessao();
        NavigationManager.NavigateTo("/");
    }
}
